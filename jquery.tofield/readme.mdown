# To:Field jQuery Plugin Readme

## Contents

1. Quick Start
2. Overview
3. Use and Options
4. Skinning/CSS
5. Searching
6. Global Function Replacement
7. Contact & ToField Object APIs
8. Credits

## Quick Start

The to:field plugin is applied via a jQuery element selection, and takes a hash of customization options as argument:

	jQuery('input').toField({ /* options ... */ });

The jQuery result must resolve to a collection of input elements (or, more commonly, just one).

There are two basic ways to use the to:field plugin:

- with a list of contacts you know about at page load, or 
- with a list that's stored on the server, a few of which you want to fetch at a time using ajax

In either case, the plugin expects to be told about these contacts via an array of objects, each of which has at least a `name` property and an `identifier` property. So, for example, if your application knows the list of contacts ahead of time:

	jQuery('#send-message input[name=to]').toField({
		contacts: [
			{ name: 'Thomas Jefferson', identifier: 'tommy.j@whitehouse.tld' },
			{ name: 'Albert Einstein', identifier: 'bert@relativi.ty.tld' },
			{ name: 'Edgar Allen Poe', identifier: 'allen@rapping.rapping.tld' },
			{ name: 'Carl Sandberg', identifier: 'carl@little.catfeet.tld' }
		]
	});

The `identifier` property is required and each string must be unique across the list of contacts. It is the string that will be put into the form input's value, in a comma-separated list. The name property is optional, but by default it will be used to display the contact.

In "ajax mode," you should follow this pattern:

	jQuery('#send-message input[name=to]').toField({
		search: function(text) {
			var toField = this;
			$.get('/path/to/contact-list-script', { 
					search: text, 
					maxSuggestions: 10 
				},
				function(data, status) {
					toField.handleExternalSearchResults(data);
				},
				'json'
			);
		}
	});

One thing to note here: when your search function is running, the `this` reference will point to an internal ToField object. To tell the to:field plugin about the results of your ajax search, you need to call `handleExternalSearchResults` on that reference, passing it the contacts that match the search. See the jQuery documentation for details about the `get` ajax method, and see below for more information about how to customize the plugin's behavior.


## Overview

The to:field jQuery plugin transforms any text form input, with only a few lines of code, into a Facebook-style auto-suggest widget. It's been built for blindingly fast search and for ease of use, but its behavior and appearance are highly customizable. While providing your users quick access to their addressbook is the most obvious use for the plugin and we use the word "contact" to describe your auto-suggest objects, the plugin will work equally well in any auto-suggest context: books, music, tags, countries, or anything!

As noted in the Quick Start above, the to:field plugin has two primary modes: 

- where it handles searching a list of contacts you provide once (all contacts are loaded on document ready, for example)
- where you handle the search and tell the widget what to display once your search has completed (via an ajax request to a server, for example)

The choice of which mode to use depends on your situation. The plugin's search algorithm is very fast and quite customizable, even over lists with thousands of items, but requires some extra computation and loading time initially to set up. Using the plugin over ajax will result in minimal computation and load time, but the widget's responsiveness will be limited by the speed of your server's search, network conditions, and so on.

If responsiveness is more important than load time or your list of contacts will be fairly small (no more than a few hundred, say), we recommend using the plugin's built-in search. If a short load time is more important, we recommend using the plugin via search over ajax. Of course, you will have to provide your own search algorithm in the latter case.

## Use and Options

As noted in the Quick Start, the plugin is invoked by calling `toField()` on the result of a jQuery selection. That selection should contain at least one `<input>` element of type `text`. The plugin will hide the input element and replace it with an interactive widget of equal initial dimensions.

The `toField()` function takes a single argument, a hash of options. Available options, with their defaults, are the following:

	{
		contacts: [],
		maxTokenRows: 4,
		maxSuggestions: 10,
		maxSuggestionRows: 5,
		acceptAdHoc: true,
		idleDelay: 100,
		scrollbarSize: 18,
		searchKeys: ['name', 'identifier'],
		search: $.fn.toField.search,
		setFormInput: $.fn.toField.setFormInput,
		getResultItemMarkup: $.fn.toField.getResultItemMarkup,
		getContactTokenMarkup: $.fn.toField.getContactTokenMarkup
	};

#### {ContactData[] | Function} options.contacts

At initialization, pass an array of contact objects, or a function that returns an array of contact objects. You may skip this option if you are using the plugin in "ajax mode".

#### {Number} options.maxTokenRows

Sets the max number of rows of "tokens" displayed in the to:field before the field stops growing vertically. A scrollbar will be displayed if more than `maxTokenRows` are required to display every token.

#### {Number} options.maxSuggestions

Sets the max number of suggestions returned by the to:field's built-in search. See Searching below for more information about how to customize search results.

#### {Number} options.maxSuggestionRows

Sets the max number of suggestions displayed in the auto-suggest list before the list stops growing vertically. A scroll bar will be displayed if there are more than `maxSuggestionRows` suggestions to be displayed.

#### {Boolean} options.acceptAdHoc

If true, the to:field will allow users to input strings not present in the list of available contacts. If false, only contacts provided as a result of either ajax or internal searches can be selected and added to the to:field.

#### {ContactData[] | undefined} options.search({String})

Override the built-in search function. This property is a function that takes a single string argument and returns either an array of search results, or nothing. In the latter case, you can asynchronously inform the to:field of your search results by calling `handleExternalSearchResults` on the ToField object. See Quick Start above for an example, or Contact & ToField Object APIs below for more information.

#### {Number} options.idleDelay

The number of milliseconds idle time to wait before invoking search on the current user's input text. This provides a buffer so that expensive ajax requests or search routines are not run after every single keystroke. This number can usually be lower when running internal searches, and may need to be somewhat higher when running ajax searches.

#### {Number} options.scrollbarSize

The to:field assumes a scrollbar size for layout purposes. You probably won't need to change this.

#### {Hash} options.searchKeys

An array of keys to search over in contact objects. See Searching below for more information.

#### options.setFormInput({Contact[]}, {jQuery})

By default, the `identifier` property in every contact is added to the original input form element, in a comma-separated list. You can override that behavior by setting this option. The function will be passed an array of selected contact objects, and a jQuery object wrapping the form input.

#### {String} options.getResultItemMarkup({Contact})

You can override the built-in markup that creates a result item in the search result list. This function will be passed the contact that should be represented. It should return a markup representation of the contact for the pop-up results list, embedded in a single `li` element. For reference, here is the default implementation:

	$.fn.toField.getResultItemMarkup = function(contact) {
		return '\
			<li class="search-result">\
				<div class="contact-name">' + contact.name + '</div>\
				<div class="contact-identifier">&lt;' + contact.identifier + '&gt;</div>\
			</li>';
	};

See Contact API below for information about using Contact objects.

#### {String} options.getContactTokenMarkup({Contact})

This function determines the markup used to generate tokens in the to:field. You can override this markup by setting this option. For reference, here is the default implementation:


	$.fn.toField.getContactTokenMarkup = function(contact) {
		var customClass = contact.getCustomClass();
		return '\
			<a href="javascript:void(0)" title="' + contact.identifier + '" class="contact-token' + (customClass.length ? ' ' + customClass : '') + '">\
				' + (contact.name.length ? contact.name.replace(' ', '&nbsp;') : contact.identifier) + '\
			</a>';
	};

Note that these tokens are _not_ enclosed in a list, so you should not return them in `<li>` elements. See the Contact API below for information about using Contact objects.

## Skinning/CSS

The to:field plugin code is designed to adapt to its CSS properties. Some behaviors and properties are hard-coded and should not be changed, but you can typically override the dimensions, colors, borders and backgrounds of its UI elements without fear of breakage.

Below are a few useful CSS selectors to know about:

#### .to-field

This class is applied to the container div which replaces your `input` field in the page and contains tokens for the currently selected contacts.

#### .inline-input-container

This class is applied to a div which contains the inline input into which you actually type. This input is restricted to a single line in the .to-field container and its dimensions are controlled by Javascript.

#### ul.search-results 

The pop-up list of suggestions has this class. Its dimensions, overflow, and position are controlled by Javascript. To set its height, use the `options.maxSuggestionRows` option and set the height of the list items. 

#### ul.search-results li

Suggestion list items' overflow and position should not be changed. These items receive various other classes in certain cases (see the next few entries here).

#### ul.search-results li.highlighted

Items in the suggestion list are highlighted on rollover, or via the arrow-keys.

#### ul.search-results li .contact-name

This class is applied by the default `getResultItemMarkup` implementation to the name portion of the suggestion item.

#### ul.search-results li .contact-identifier

This class is applied by the default `getResultItemMarkup` implementation to the identifier portion of the suggestion item.

#### ul.search-results li.mirror

If you have `options.acceptAdHoc` turned on, the ad-hoc item at the top of the suggestion list gets this class--called "mirror" because it mirrors the user's typed input.

#### .contact-token

This class is applied to the tokens in the to: field by the default `getContactTokenMarkup` implementation. Tokens are given a couple of other classes in certain cases (see the next few entries here).

#### .token-hover

This class is applied to tokens when the user's mouse is hovering over them.

#### .x-hover

This class is applied to tokens when the user's mouse is hovering over their right padding. This is the area in which tokens are expected to have an "X" button for removal. Also note that when clicked over their right padding, tokens are removed (and their contacts deselected).

#### {custom class}

One property on your contact objects, if defined, is treated specially. If you define a `customClass` property on your objects with a string value, that string will be added as a CSS class to your suggestion item and contact token items.


## Searching

The to:field plugin offers a very fast internal searching algorithm that is also highly customizable. By default, it searches over the `name` and `identifier` properties in your contact objects, in that order. It compares the first letters of each property to the text typed into the to:field, returning any matches. The comparison is case-insensitive. 

### Basic Customization

Your contacts may have more metadata than just a name or identifier, however, and this is where the to:field's search options are pretty cool. By specifying other keys to search over in the `searchKeys` option, the to:field will search those keys for prefix matches, too.

For example, you may have a list of contacts with name as the `name` property, and email address as the `identifier` property:

	jQuery('#send-message input[name=to]').toField({
		contacts: [
			{ name: 'Thomas Jefferson', identifier: 'tommy.j@whitehouse.tld' },
			{ name: 'Albert Einstein', identifier: 'bert@relativi.ty.tld' },
			{ name: 'Edgar Allen Poe', identifier: 'allen@rapping.rapping.tld' },
			{ name: 'Carl Sandberg', identifier: 'carl@little.catfeet.tld' }
		]
	});

This should work well, but what will happen when a user types "poe", looking for his favorite poet Edgar Allen Poe? Since the search is based on prefix matches, the built-in search for `name` will not match last names, so "poe" will return nothing. This can be remedied by specifying a lastName property on your contacts, and adding that to the searchKeys option:

	jQuery('#send-message input[name=to]').toField({
		searchKeys: ['lastName']
		contacts: [
			{ name: 'Thomas Jefferson', identifier: 'tommy.j@whitehouse.tld', lastName: 'Jefferson' },
			{ name: 'Albert Einstein', identifier: 'bert@relativi.ty.tld', lastName: 'Einstein' },
			{ name: 'Edgar Allen Poe', identifier: 'allen@rapping.rapping.tld', lastName: 'Poe' },
			{ name: 'Carl Sandberg', identifier: 'carl@little.catfeet.tld', lastName: 'Sandberg' }
		]
	});

Now, the to:field plugin will automatically index the `lastName` property on all your contacts, and make it available for search. Typing "Poe" will return the Edgar contact as a result. The `name` and `identifier` properties are also still indexed, and will be searched before `lastName`. You can override this behavior by specifically mentioning them in the `searchKeys` array. For example,

	searchKeys: ['name', 'lastName', 'identifier']
	
will search over `name` first, `lastName` second, and `identifier` third. If you leave off `identifier`, it will wind up in front of the list, so be sure to be explicit if you want to control the order of search.

Now let's say your contacts also have a "group" that they belong to, and you add that to the contact objects you pass into the to:field function. Add a `group` key to the searchKeys option:

	jQuery('#send-message input[name=to]').toField({
		searchKeys: ['lastName', 'group']
		contacts: [
			{ name: 'Thomas Jefferson', identifier: 'tommy.j@whitehouse.tld', lastName: 'Jefferson', group: 'Presidents' },
			{ name: 'Albert Einstein', identifier: 'bert@relativi.ty.tld', lastName: 'Einstein', group: 'Scientists' },
			{ name: 'Edgar Allen Poe', identifier: 'allen@rapping.rapping.tld', lastName: 'Poe', group: 'Poets' },
			{ name: 'Carl Sandberg', identifier: 'carl@little.catfeet.tld', lastName: 'Sandberg', group: 'Poets' }
		]
	});


Now, when your user types "poets" (or any shorter prefix thereof) into the to:field widget, Edgar Allen Poe and Carl Sandburg will both be returned as matches. Since `lastName` appears in the searchKeys array before `group`, Edgar Allen Poe will appear before Carl Sandberg. 

### Advanced Customization

Finally, let's say that you want to, as a last resort, search for any fragment of the search text in some property. You can define your own search function to do this, and you can do it on a property that has already been searched by prefix. So if the search string doesn't prefix-match `name`, `identifier`, `group`, or `lastName`, you can try to match anything in the `name` property by doing something like the following:

	searchKeys: ['name', 'lastName', 'identifier', 'group', {
			property: 'name',
			search: function(contacts, key, text, suggestionsToGo) {
				var results = [];
				$.each(contacts, function(i, contact) {
					if (contact[key].toLowerCase().indexOf(text) != -1) {
						results.push(contact);
					}
					if (results.length >= suggestionsToGo) {
						return false;
					}
				});
				return results;
			}
		}
	]

Here, instead of specifying a property name via a string, you put an object into the `searchKeys` array which has:

- a property named `property` which is the name of the property in your contact objects over which you want to run a custom search, and 
- a search function that takes as arguments: 
	- an array of Contact objects--this will be the full list you specified originally
	- the property name to be searched (which will be 'name' in this case)
	- the search text
	- and the number of suggestions left to go for this search, based on your `options.maxSuggestions` setting

The search function should return that subset of contacts which match the search text, according to your custom search algorithm, but no more than `suggestionsToGo`. In this case, we just look for any occurrence of the search text in the passed contacts and stop looking once we've found `suggestionsToGo` many of them.

As before, the order of your custom search in the searchKeys array determines when it is run. Note again that we already searched name using the built-in prefix search; our custom search does not prevent that from happening. A search like the above will be relatively slow, so you will probably want to run it as a last resort, when nothing else matches.

**Note:** You don't need to filter out duplicate hits from earlier searches--the to:field plugin will do that for you.


## Global Function Replacement

You can replace the following methods for every to:field instance on a page:

- getResultItemMarkup
- getContactTokenMarkup
- search
- setFormInput

To globally replace one of these methods, define it as follows, after including jquery.tofield.js and before attaching the to:field plugin to any inputs.

	$.fn.toField.getResultItemMarkup = function(contact) {
		/* ... my implementation ... */
	};

In each of these methods, the `this` reference will refer to the owning ToField object. For more detail on each function, see its entry in the Use and Options section above.

## Contact & ToField Object APIs

Under the hood, the to:field plugin uses some object-oriented stuff. The bare contact objects you pass to the plugin are converted to first-class objects with methods, and each instance of a to: field is managed by a ToField object instance. There are a couple of cases--mainly in `getResultItemMarkup` and `getContactTokenMarkup`, if you override them--in which you might want to interact with those objects. Those methods are passed a Contact object, and within those methods, `this` will refer to the current ToField object.

Another case is when using the plugin in "ajax mode". There, you'll need to call `ToField.handleExternalSearchResults` to inform the plugin of your ajax results.

For forward compatibility, it's best to use the methods defined on these objects, rather than accessing their bare properties. Below are a few methods that might be useful to you.

#### {String} Contact.getCustomClass()

Returns the custom class defined on the contact, if any. (See {custom class} in the CSS/Skinning section above).

#### {Boolean} Contact.isMirror() 

Returns `true` if the contact item is a "mirror" contact--an ad-hoc contact not in the original list of contacts.

#### {Boolean} Contact.isSelected()

Returns `true` if the contact is currently selected--that is, added to the to: field.

#### {String} ToField.getSearchText()

Returns the current search text.

#### {jQuery} ToField.getFormInput()

Returns this ToField's form input, wrapped in jQuery.

#### ToField.handleExternalSearchResults({ContactData[]})

Call this method to asynchronously provide search results to the plugin, based on a search you handle yourself (probably via ajax). Passing a function for `options.search` and calling this method to provide the results will completely bypass the plugin's internal searching algorithm. (See Quick Start for an example.) The contact data you pass in should be an array of contact objects structured just like the contact data you'd pass in to initialize the plugin normally.


## Credits

The to:field plugin was developed by <a href="http://crowdfavorite.com">Crowd Favorite</a>.